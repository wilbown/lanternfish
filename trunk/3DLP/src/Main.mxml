<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   initialize="handleInit();"
					   applicationComplete="handleLoad();"
					   closing="handleClose();"
					   showStatusBar="false"
					   width="562" height="638" backgroundColor="#000000">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Style source="Main.css"/>
	<fx:Script>
		<![CDATA[
			import com.quetwo.Arduino.ArduinoConnector;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.graphics.codec.PNGEncoder;
			
			import spark.components.Window;
			
			//public fields***************************************************************
			internal var arduinoPort:int = 6;
			internal var arduino:ArduinoConnector = null;
			internal var blankTimeout:Timer = null;
			internal var showTimer:Timer = null;
			internal var SliceApp:File = null;
			internal var File3D:File = null;
			internal var SliceFolder:File = null;
			
			//GUI*************************************************************************
			[Embed(source='blank_black.png', mimeType='image/png')]
			private static var Eblank:Class;
			
			private var SlideShowSameScreen:Boolean = true;
			private var SlideShowScreen:Screen = null;
			public var SlideShow:Window;
			private var ui_slide:Bitmap;
			private var ui_blank:BitmapData;
			
			[Bindable]
			private var lstSmoothing:ArrayList = new ArrayList([0.5,1,2,3,4]);
			
			//event handlers**************************************************************
			private function handleInit():void {
				File3D = File.desktopDirectory; txtFile3D.text = File3D.nativePath;
				SliceFolder = File.desktopDirectory.resolvePath("3DLP\\slides"); txtSliceFolder.text = SliceFolder.nativePath;
				//drpSmoothing.dataProvider = new ArrayList([0.5,1,2,3,4]);
				//drpSmoothing.labelFunction = function(i:Object):String{return i.toString()+"x"};
			}
			private function handleLoad():void {
				arduinoConnect();
				
				//the app that cuts up the 3D model files
				SliceApp = File.applicationDirectory;
				SliceApp = SliceApp.resolvePath("Slicer\\dist\\slice.exe");
				
				//uses the first extra screen if connected, otherwise the main screen
				var screenVirtMain:Screen = Screen.getScreensForRectangle(new Rectangle(0, 0, 1, 1))[0];
				SlideShowScreen = screenVirtMain;
				for each (var sc:Screen in Screen.screens) { 
					if (!sc.bounds.equals(screenVirtMain.bounds)) {
						SlideShowScreen = sc;
						SlideShowSameScreen = false;
						break;
					}
				}
				var sb:Rectangle = SlideShowScreen.bounds;
				trace("x: " + sb.x + " y: " + sb.y);
				trace("width: " + sb.width + " height: " + sb.height);
				
				//show slices for exposure 
				SlideShow = new Window();
				SlideShow.title = "3DLP Printing...";
				SlideShow.alwaysInFront = true;
				setupFullscreenWindowAIR(SlideShow, SlideShowScreen, !SlideShowSameScreen);
				ui_blank = (new Eblank()).bitmapData;
				ui_slide = new Bitmap();
				setBitmapData(ui_slide, ui_blank, SlideShowScreen.bounds.width, SlideShowScreen.bounds.height);
				SlideShow.stage.addChild(ui_slide);
				
				//timers for slideshow
				showTimer = new Timer(int(txtExposureTime.text), 1);
				showTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onBlank);
				blankTimeout = new Timer(int(txtStepperTime.text), 1);
				blankTimeout.addEventListener(TimerEvent.TIMER_COMPLETE, onShow);
				
				stage.addEventListener(KeyboardEvent.KEY_DOWN, this.onKeyDown);
			}
			private function handleClose():void {
				arduinoDisconnect();
				SlideShow.close();
			}
			//main app control keys
			private var wherePaused:String = "";
			private function onKeyDown(e:KeyboardEvent):void {
				trace("got key: "+e.keyCode.toString());
				if (e.keyCode == Keyboard.SPACE) { //pause on blank/play next slide
					if (showTimer.running) {
						showTimer.reset();
						wherePaused = "S";
					} else if (blankTimeout.running) {
						blankTimeout.reset();
						wherePaused = "B";
					} else {
						if (wherePaused=="S") onBlank(null);
						else if (wherePaused=="B") onShow(null);
						wherePaused = "";
					}
				} else if (e.keyCode == Keyboard.S || e.keyCode == Keyboard.ESCAPE) { //stop
					lblStatus.text = "Stopped printing slices.";
					stopPrint();
				} else if (e.keyCode == Keyboard.LEFT) { //back a slide
					blankTimeout.reset(); showTimer.reset();
					wherePaused = "S";
					curSlice--; if (curSlice<0) curSlice = 0;
					showCurSlide();
				} else if (e.keyCode == Keyboard.RIGHT) { //forward a slide
					blankTimeout.reset(); showTimer.reset();
					wherePaused = "S";
					var sl:int = sliceFiles.length-1;
					curSlice++; if (curSlice>sl) curSlice = sl;
					showCurSlide();
				}
			}
			
			//***Arduino
			private function arduinoConnect():void {
				var p:String = arduinoPort.toString();
				arduino = new ArduinoConnector();
				arduino.connect("COM"+p, 57600);
				if (arduino.portOpen) {
					arduino.addEventListener(ProgressEvent.SOCKET_DATA, this.onArduino);
					lblStatus.text = "Successfully connected to Arduino on port COM"+p;
				} else {
					arduino.dispose(); arduino = null;
					lblStatus.text = "Failed to connect to Arduino on port COM"+p.toString();
				}
			}
			private function arduinoDisconnect():void {
				if (arduino!=null) {
					arduino.removeEventListener(ProgressEvent.SOCKET_DATA, this.onArduino);
					if (arduino.portOpen) arduino.close();
					arduino.dispose();
				}
			}
			protected function txtCOMPort_connectHandler(event:Event):void {
				var p:int = int(txtCOMPort.text);
				if (p < 1 || p > 256) {
					lblStatus.text = "Unusable port COM"+p.toString();
					return;
				}
				arduinoPort = p;
				arduinoDisconnect();
				arduinoConnect();
			}
			protected function btnDisconnect_Handler(event:Event):void {
				if (arduino!=null) {
					arduinoDisconnect(); arduino = null;
					lblStatus.text = "Disconnected from Arduino.";
				}
			}
			public function onTrigger1(event:MouseEvent):void {
				if (arduino!=null && arduino.portOpen) {
					arduino.writeByte(49);
					lblStatus.text = "Trigger 1 sent to Arduino";
				}
			}
			public function onTrigger2(event:MouseEvent):void {
				if (arduino!=null && arduino.portOpen) {
					arduino.writeByte(50);
					lblStatus.text = "Trigger 2 sent to Arduino";
				}
			}
			public function onTrigger3(event:MouseEvent):void {
				if (arduino!=null && arduino.portOpen) {
					arduino.writeByte(51);
					lblStatus.text = "Trigger 3 sent to Arduino";
				}
			}
			private function onArduino(e:ProgressEvent):void {
				if (arduino.bytesAvailable < 1) return;
				var code:String = arduino.readBytesAsString().substr(0,1);
				trace("Event: SOCKET_DATA [" + code + "]");
				
				if (code == "S") {
					lblStatus.text = "Arduino --> Stopped printing slices.";
					stopPrint();
				} else if (code == "N") {
					lblStatus.text = "Arduino --> Steppers done.";
					blankTimeout.reset();
					showCurSlide();
				} else if (code == "B") {
					lblStatus.text = "Arduino --> Show blank.";
					showBlankSlide();
				} else if (code == "P") {
					lblStatus.text = "Arduino --> Start Print...";
				}
			}
			
			
			//***slice 3D model file
			private var ftypes:FileFilter = new FileFilter("3D", "*.stl");
			protected function btnChooseFile3D_click(event:MouseEvent):void {
				File3D.browseForOpen("Please pick a 3D file to print", [ftypes]);
				File3D.addEventListener(Event.SELECT, File3D_selected);
			}
			private function File3D_selected(event:Event):void {
				File3D = event.target as File; txtFile3D.text = File3D.nativePath;
			}
			protected function btnChooseSliceFolder_click(event:MouseEvent):void{
				SliceFolder.browseForDirectory("Please pick a folder to store temporary image slices.");
				SliceFolder.addEventListener(Event.SELECT, SliceFolder_selected);
				txtSliceFolder.text = SliceFolder.nativePath;
			}
			private function SliceFolder_selected(event:Event):void {
				SliceFolder = event.target as File; txtSliceFolder.text = SliceFolder.nativePath;
			}
			
			private var ps:NativeProcess = new NativeProcess();
			protected function btnGenerate_click(event:MouseEvent):void {
				if (ps.running) return;
				if (!NativeProcess.isSupported) {
					lblStatus.text = "System does not support slicing."; return;
				}
				if (!File3D.exists || File3D.isDirectory || File3D.isPackage) {
					lblStatus.text = "3D object file not found."; return;
				}
				slice_height = Number(txtSliceThickness.text);
				if (isNaN(slice_height)) {
					lblStatus.text = "Slice Thickness is not a number."; return;
				}
				shell_thickness = Number(txtShellThickness.text);
				if (chkHollow.selected && isNaN(shell_thickness)) {
					lblStatus.text = "Shell Thickness is not a number."; return;
				}
				if (SliceFolder.exists) {
					try {
						SliceFolder.deleteDirectory(true);
					} catch (e:Error) {
						lblStatus.text = "Could not remove Slice Folder."; return;
					}
				}
				SliceFolder.createDirectory();
				
				lblStatus.text = "Getting 3D object info...";
				
				//get needed 3D model info from Slicer
				buff = "";
				var psi:NativeProcessStartupInfo = new NativeProcessStartupInfo();
				psi.executable = SliceApp;
				psi.arguments = new <String>[File3D.nativePath];
				psi.workingDirectory = SliceFolder;
				
				ps.addEventListener(NativeProcessExitEvent.EXIT, onExitInfo);
				ps.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputInfo);
				ps.start(psi);
			}
			private var info:Object = null;
			private var buff:String = null;
			public function onOutputInfo(event:ProgressEvent):void {
				var tmp:String = ps.standardOutput.readUTFBytes(ps.standardOutput.bytesAvailable);
				buff += tmp;
				trace("Got: ", tmp); 
			}
			private var slice_height:Number = 1.0;
			private var shell_thickness:Number = 1.0;
			private var slicer_args:Vector.<String>;
			public function onExitInfo(event:NativeProcessExitEvent):void {
				ps.removeEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputInfo);
				ps.removeEventListener(NativeProcessExitEvent.EXIT, onExitInfo);
				trace("Slice info exited with ", event.exitCode);
				
				info = JSON.parse(buff);
				trace("zlo["+info.zlo.toString()+"]");
				trace("zhi["+info.zhi.toString()+"]");
				
				//setup slices
				var w:int = SlideShowScreen.bounds.width * drpSmoothing.selectedItem as Number;
				var h:int = SlideShowScreen.bounds.height * drpSmoothing.selectedItem as Number;
				trace("w["+w.toString()+"]");
				trace("h["+h.toString()+"]");
				slicer_args = new <String>[File3D.nativePath,"--cavity=black","--core=white","--layer="+(slice_height*1.1).toString(),"-z"+info.zlo.toString()+","+info.zhi.toString()+","+slice_height.toString(),"-w",w.toString(),"-h",h.toString()];
				
				//create slices
				lblStatus.text = "Generating slices...";
				var psi:NativeProcessStartupInfo = new NativeProcessStartupInfo();
				psi.executable = SliceApp;
				psi.arguments = slicer_args.concat(new <String>["-o","slice.png"]);
				trace("psi.arguments["+psi.arguments.toString()+"]");
				psi.workingDirectory = SliceFolder;
				
				ps.addEventListener(NativeProcessExitEvent.EXIT, onExitSlice);
				ps.start(psi);
			}
			public function onExitSlice(event:NativeProcessExitEvent):void {
				ps.removeEventListener(NativeProcessExitEvent.EXIT, onExitSlice);
				trace("Slicing exited with ", event.exitCode);
				
				if (chkHollow.selected) {
					//create hollow cutout slices
					lblStatus.text = "Generating hollow cutout slices...";
					var psi:NativeProcessStartupInfo = new NativeProcessStartupInfo();
					psi.executable = SliceApp;
					psi.arguments = slicer_args.concat(new <String>["-o","xslice.png","--shell","--offset=0","--radius="+shell_thickness.toString()]);
					trace("psi.arguments["+psi.arguments.toString()+"]");
					psi.workingDirectory = SliceFolder;
					ps.addEventListener(NativeProcessExitEvent.EXIT, onExitCutout);
					ps.start(psi);
				} else {
					lblStatus.text = "Done generating slices.";
				}
			}
			public function onExitCutout(event:NativeProcessExitEvent):void {
				ps.removeEventListener(NativeProcessExitEvent.EXIT, onExitCutout);
				trace("Cutout slicing exited with ", event.exitCode);
				
				//use slice.png to cut out xslice.png by multiplying pixels
				lblStatus.text = "Cutting out slices....";
				
				sliceFiles = new Array();
				for each (var f:File in SliceFolder.getDirectoryListing()) {
					if (f.name.substr(0,6) == "slice_") sliceFiles.push(f);
				} 
				if (sliceFiles.length > 0) {
					curSlice = 0;
					preview.addEventListener(FlexEvent.READY, onSliceReady);
					preview.source = (sliceFiles[curSlice] as File).nativePath;
				}
			}
			private var current_slice_BM:BitmapData = null;
			private var sliceF:File = null;
			private var cutoutF:File = null;
			public function onSliceReady(e:FlexEvent):void {
				preview.removeEventListener(FlexEvent.READY, onSliceReady);
				//trace("onSliceReady");
				current_slice_BM = preview.bitmapData;
				
				sliceF = (sliceFiles[curSlice] as File);
				var cutout_path:String = sliceF.nativePath.substr(0,sliceF.nativePath.length-sliceF.name.length)+"x"+sliceF.name;
				trace("cutout_path [",cutout_path,"]");
				
				cutoutF = new File(cutout_path);
				if (cutoutF.exists) {
					preview.addEventListener(FlexEvent.READY, onCutoutReady);
					preview.source = cutoutF.nativePath;
				}
			}
			public function onCutoutReady(e:FlexEvent):void {
				preview.removeEventListener(FlexEvent.READY, onCutoutReady);
				//trace("onCutoutReady");
				curSlice++;
				current_slice_BM.draw(preview.bitmapData, null, null, BlendMode.MULTIPLY);
				
				//save
				var png:PNGEncoder = new PNGEncoder();
				var fs:FileStream = new FileStream();
				fs.open(sliceF, FileMode.WRITE);
				fs.writeBytes(png.encode(current_slice_BM));
				fs.close();
				current_slice_BM.dispose();
				preview.bitmapData.dispose();
				cutoutF.deleteFile();
				
				lblStatus.text = "Cut out "+sliceF.name;
				
				if (curSlice >= sliceFiles.length) {
					lblStatus.text = "Done generating slices.";
					preview.source = ui_blank;
				} else {
					preview.addEventListener(FlexEvent.READY, onSliceReady);
					preview.source = (sliceFiles[curSlice] as File).nativePath;
				}
			}
			
			
			//***slideshow control
			private var curSlice:int = 0;
			private var sliceFiles:Array = null;
			private var showPreview:Boolean = false;
			protected function btnPreview_click(event:MouseEvent):void {
				lblStatus.text = "Previewing slices...";
				showPreview = true;
				resetAndPrint();
			}
			protected function btnPrint_click(event:MouseEvent):void {
				lblStatus.text = "Printing slices...";
				showPreview = false;
				resetAndPrint();
			}
			protected function btnStop_click(event:MouseEvent):void {
				lblStatus.text = "Stopped printing slices.";
				stopPrint();
			}
			private function stopPrint():void {
				blankTimeout.reset(); showTimer.reset();
				showBlankSlide();
				if (SlideShowSameScreen && !showPreview) {
					SlideShow.visible = false;
					Mouse.show();
				}
			}
			private function resetAndPrint():void {
				blankTimeout.reset(); showTimer.reset();
				showTimer.delay = int(txtExposureTime.text);
				blankTimeout.delay = int(txtStepperTime.text);
				
				sliceFiles = SliceFolder.getDirectoryListing();
				curSlice = 0;
				if (SlideShowSameScreen && !showPreview) {
					Mouse.hide();
					SlideShow.visible = true;
				}
				onBlank(null);
			}
			public function onBlank(e:TimerEvent):void {
				lblStatus.text = "Waiting for stepper...";
				if (curSlice >= sliceFiles.length) {
					lblStatus.text = "Done printing slices.";
					stopPrint();
					return;
				}
				showBlankSlide(); trace("onBlank");
				if (arduino!=null && arduino.portOpen) arduino.writeByte(48);
				blankTimeout.start();
			}
			public function onShow(e:TimerEvent):void {
				showCurSlide(); trace("onShow");
			}
			public function onShowReady(e:FlexEvent):void {
				preview.removeEventListener(FlexEvent.READY, onShowReady);
				trace("onShowReady");
				curSlice++;
				if (!showPreview) setBitmapData(ui_slide, preview.bitmapData, SlideShowScreen.bounds.width, SlideShowScreen.bounds.height);
				showTimer.start();
			}
			private function showBlankSlide():void {
				setBitmapData(ui_slide, ui_blank, SlideShowScreen.bounds.width, SlideShowScreen.bounds.height);
				preview.source = ui_blank;
			}
			private function showCurSlide():void {
				var f:File = sliceFiles[curSlice];
				lblStatus.text = (showPreview?"Preview of":"Exposing")+" ["+f.name+"]...";
				preview.addEventListener(FlexEvent.READY, onShowReady);
				preview.source = f.nativePath;
			}
			
			
			//GUI helpers**************************************************************
			//setup and open a Window object fullscreen
			private static function setupFullscreenWindowAIR(win:Window, screen:Screen = null, visible:Boolean = false):void {
				if (screen == null) screen = Screen.mainScreen;
				win.systemChrome = NativeWindowSystemChrome.NONE;
				win.transparent = true;
				win.maximizable = false;
				win.minimizable = false;
				win.resizable = false;
				win.showStatusBar = false;
				win.visible = visible;
				win.open(visible);
				win.width = screen.bounds.width; win.height = screen.bounds.height;
				win.stage.nativeWindow.x = screen.bounds.x; win.stage.nativeWindow.y = screen.bounds.y;
				//			win.stage.fullScreenSourceRect = new Rectangle(0,0,1920,1080); 
				//			win.stage.scaleMode = StageScaleMode.SHOW_ALL;
				//			win.stage.displayState = flash.display.StageDisplayState.FULL_SCREEN_INTERACTIVE;
			}
			private static function scaleToFit(can:BorderContainer, w:int, h:int):void {
				var scaleW:Number = (can.width==0)?1.0:Math.floor(w/can.width*100)/100;
				var scaleH:Number = (can.height==0)?1.0:Math.floor(h/can.height*100)/100;
				var scale:Number = Math.min(scaleW,scaleH);
				can.scaleX = scale; can.scaleY = scale;
				trace("scale: " + scale);
			}
//			private static function loadBitmap(win:Window):Bitmap {
//				
//			}
			private static function setBitmapData(bm:Bitmap, bmd:BitmapData, w:Number, h:Number):void {
				bm.bitmapData = bmd;
				bm.width = w; bm.height = h;
				bm.smoothing = true;
				//o.pixelSnapping = PixelSnapping.ALWAYS; //defaults to 'auto'
				bm.cacheAsBitmap = true;
				bm.cacheAsBitmapMatrix = new Matrix();
			}
			
			//************************************************************
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BorderContainer y="11" width="541" height="300" backgroundColor="#000000" borderVisible="true"
					   horizontalCenter="0">
		<s:Label id="txtFile3D" x="143" y="14.95" width="310" color="#FFFFFF"/>
		<s:Button id="btnChooseFile3D" x="461" y="14.150024" label="Choose"
				  click="btnChooseFile3D_click(event)"/>
		<s:Label id="txtSliceFolder" x="143" y="46.95" width="310" color="#FFFFFF"
				 fontWeight="normal"/>
		<s:Button id="btnChooseSliceFolder" x="461" y="46.150024" label="Choose"
				  click="btnChooseSliceFolder_click(event)"/>
		<s:CheckBox id="chkHollow" x="143" y="75" color="#AAAAAA"/>
		<s:TextInput id="txtShellThickness" x="143" y="97.95" width="43" text="1.0"/>
		<s:Label x="9" y="103" color="#AAAAAA" text="Shell Thickness (mm)" textAlign="right"/>
		<s:Label x="60" y="80" color="#AAAAAA" text="Hollow Shell" textAlign="right"/>
		<s:DropDownList id="drpSmoothing" x="346" y="74" width="56" dataProvider="{lstSmoothing}"
						selectedIndex="1"></s:DropDownList>
		<s:TextInput id="txtSliceThickness" x="346" y="99.95" width="43" text="1.0"/>
		<s:Button id="btnGenerate" x="422" y="98" label="Generate Slices" chromeColor="#8EC87A"
				  click="btnGenerate_click(event)"/>
		<s:TextInput id="txtCOMPort" x="175" y="238.75" width="24" enter="txtCOMPort_connectHandler(event)" text="6"/>
		<s:Button id="btnConnect" x="210" y="239" label="Connect" click="txtCOMPort_connectHandler(event)"/>
		<s:Button id="btnDisconnect" x="290" y="239" label="Disconnect" click="btnDisconnect_Handler(event)"/>
		<s:Button id="btnTrig1" x="450" y="172" label="Trigger 1" click="onTrigger1(event)"/>
		<s:Button id="btnTrig2" x="450" y="205" label="Trigger 2" click="onTrigger2(event)"/>
		<s:Button id="btnTrig3" x="450" y="239" label="Trigger 3" click="onTrigger3(event)"/>
		<s:Label x="64" y="51" color="#AAAAAA" text="Slice Folder" textAlign="right"/>
		<s:Label x="52" y="19" color="#AAAAAA" text="3D Object File" textAlign="right"/>
		<s:Label x="214" y="105" color="#AAAAAA" text="Slice Thickness (mm)" textAlign="right"/>
		<s:Label x="273" y="80" color="#AAAAAA" text="Smoothing" textAlign="right"/>
		<s:Label x="62" y="244.75" color="#AAAAAA" text="Arduino Port" textAlign="right"/>
		<s:Label x="145" y="244.75" color="#FFFFFF" text="COM" textAlign="right"/>
		<s:BorderContainer x="-1" y="141" width="427" height="82" backgroundColor="#000000">
			<s:TextInput id="txtExposureTime" x="144" y="12.95" width="67" text="2000"/>
			<s:TextInput id="txtStepperTime" x="144" y="44" width="67" text="2000"/>
			<s:Button id="btnPreview" x="238" y="15" label="Preview" chromeColor="#E8EB9D"
					  click="btnPreview_click(event)"/>
			<s:Button id="btnPrint" x="318" y="15" label="Start Print" chromeColor="#9DCA97"
					  click="btnPrint_click(event)"/>
			<s:Button id="btnStop" x="318" y="48" width="74" label="Stop" chromeColor="#CA8080"
					  click="btnStop_click(event)"/>
			<s:Label x="19" y="17" color="#AAAAAA" text="Exposure Time (ms)" textAlign="right"/>
			<s:Label x="11" y="48" color="#AAAAAA" text="Stepper Timeout (ms)" textAlign="right"/>
		</s:BorderContainer>
		<s:Label id="lblStatus" y="276" color="#E08F38" fontSize="16" horizontalCenter="0"
				 text="status..." textAlign="center"/>
	</s:BorderContainer>
	<s:BorderContainer y="322" width="542" height="305" backgroundColor="#000000"
					   horizontalCenter="0">
		<s:BitmapImage id="preview" x="0" y="0" width="540" height="303"/>
	</s:BorderContainer>
</s:WindowedApplication>
